/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

buildscript {
    repositories {
    	maven { url 'http://localhost:8081/repository/maven-public/' }
    }
    
    dependencies {
 		classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE'
 		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
// 		classpath("se.transmode.gradle:gradle-docker:1.2")
	}
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
//apply plugin: 'docker'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
	maven { url 'http://localhost:8081/repository/maven-public/' }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.

    // API documentation

	// This dependency is used internally for compilation
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'org.springframework.boot:spring-boot-starter-actuator'

//	compile 'org.liquibase:liquibase-core'
	compile 'com.h2database:h2'
//	compile 'mysql:mysql-connector-java:6.0.6'
//	compile 'com.oracle.jdbc:ojdbc8:12.2.0.1'
        
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    compile 'org.codehaus.woodstox:woodstox-core-asl:4.4.1'
    compile 'javax.xml.bind:jaxb-api:2.3.0'
    
    compile 'io.springfox:springfox-swagger2:2.8.0'
    compile 'io.springfox:springfox-swagger-ui:2.8.0'
     
    // Use JUnit test framework
    compile 'org.springframework.boot:spring-boot-starter-test'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "http://localhost:8081/nexus/content/repositories/releases/"
            def snapshotsRepoUrl = "http://localhost:8081/nexus/content/repositories/snapshots/"
            url version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
 
 			credentials {
            	username 'admin'
           		password 'admin123'
        	}
        }        
    }
}

sonarqube {
  properties {
	property "sonar.projectKey", "$group:$project.name" 
    property "sonar.projectName", "$project.name"
	property "sonar.projectVersion", "$version"
	property "sonar.sources", "src/main/java"
	property "sonar.tests", "src/test/java"
	property "sonar.java.binaries", "build/classes"	
	property "sonar.junit.reportsPath","build/test-results/**.*"
	property "sonar.jacoco.reportPaths","build/jacoco"
	property "sonar.sourceEncoding","UTF-8"
  }
}

// project.group = 'arunkhavate'

//task buildDocker(type: Docker, dependsOn: build) {
////  push = true
//  applicationName = jar.baseName
//  dockerfile = file('Dockerfile')
//  doFirst {
//    copy {
//      from jar
//      into "${stageDir}/target"
//    }
//  }
//}